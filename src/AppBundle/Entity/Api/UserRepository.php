<?php

namespace AppBundle\Entity\Api;

use AppBundle\Controller\APIController;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr as Expr;
use Doctrine\ORM\AbstractQuery;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function SelectUsers($id = null)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select('u,a')
            ->leftJoin('u.amis','a', Expr\Join::WITH)
            ->orderBy('u.id', 'DESC')
        ;
        if($id != null){
            $qb->where('u.id = :id')
                ->setParameters([
                    ':id' => $id,
                ])
            ;
        }
        return null === $id
            ? $qb->getQuery()->getArrayResult()
            : $qb->getQuery()->getSingleResult(AbstractQuery::HYDRATE_ARRAY);
    }


    public function RegisterUser($email,$pseudo,$password)
    {
        if(!empty($email) && !empty($pseudo) && !empty($password)) {
            $em = $this->getEntityManager();

            // Je vérifie qu'un utilisateur n'a pas déja le même pseudo
            $user = $this->findOneBy(['email' => $email]);

            // S'il vaut null, l'utilisateur n'existe pas
            if ($user == null) {
                $user = $this->findOneBy(['pseudo' => $pseudo]);

                // S'il vaut null, l'utilisateur n'existe pas
                if ($user == null) {


                    // Je crée un nouvel utilisateur
                    $user = new User();
                    $user->setEmail($email);
                    $user->setPassword(crypt($password));
                    $user->setPseudo($pseudo);
                    $user->setScore(1000);
                    $user->setToken($user->createToken());

                    // Je l'ajoute dans la base de données
                    $em->persist($user);

                    $em->flush();

                    return true;

                } else {
                    return false;
                }
            } else {
                return false;
            }
        }else{
            return false;
        }
    }


    public function ConnectUser($pseudo, $password)
    {
        if( !empty($pseudo) && !empty($password)) {
            $em = $this->getEntityManager();

            // Je vérifie qu'un utilisateur n'a pas déja le même pseudo
            /**@var $user User **/
            $user = $this->findOneBy(['pseudo' => $pseudo]);


            // Gestion du token
            $token = $user->createToken();
            // Je modifie le token
            $user->setToken($token);

            // Je l'ajoute dans la base de données
            $em->persist($user);

            $em->flush();

            // Si le mot de passe est le bon
            if($user->verifyPassword($password)){
                return [
                    'token' => $token,
                    'pseudo' => $user->getPseudo(),
                    'connect' => true,
                    'id' => $user->getId(),
                    'email' => $user->getEmail(),
                ];
            }else{
                return ['connect' => false];
            }
        }else{
            return ['connect' => false];
        }
    }

}
