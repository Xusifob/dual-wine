<?php

namespace AppBundle\Entity\Api;

use AppBundle\Controller\ApiController;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr as Expr;
use Doctrine\ORM\AbstractQuery;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function SelectUsers($id = null)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select('u,a')
            ->leftJoin('u.amis','a', Expr\Join::WITH)
            ->orderBy('u.id', 'DESC')
        ;
        if($id != null){
            $qb->where('u.id = :id')
                ->setParameters([
                    ':id' => $id,
                ])
            ;
        }
        return null === $id
            ? $qb->getQuery()->getArrayResult()
            : $qb->getQuery()->getSingleResult(AbstractQuery::HYDRATE_ARRAY);
    }


    public function RegisterUser($email,$pseudo,$password)
    {
        if(!empty($email) && !empty($pseudo) && !empty($password)) {
            $em = $this->getEntityManager();

            // Je vérifie qu'un utilisateur n'a pas déja le même pseudo
            $user = $this->findOneBy(['email' => $email]);

            // S'il vaut null, l'utilisateur n'existe pas
            if ($user == null) {
                $user = $this->findOneBy(['pseudo' => $pseudo]);

                // S'il vaut null, l'utilisateur n'existe pas
                if ($user == null) {


                    // Je crée un nouvel utilisateur
                    $user = new User();
                    $user->setEmail($email);
                    $user->setPassword(crypt($password));
                    $user->setPseudo($pseudo);
                    $user->setScore(1000);
                    $user->setToken($user->createToken());

                    // Je l'ajoute dans la base de données
                    $em->persist($user);

                    $em->flush();

                    return ['inscription' => true];

                } else {
                    return ['inscription' => false];
                }
            } else {
                return ['inscription' => false];
            }
        }else{
            return ['inscription' => false];
        }
    }


    public function ConnectUser($pseudo, $password)
    {
        if( !empty($pseudo) && !empty($password)) {
            $em = $this->getEntityManager();

            // Je vérifie qu'un utilisateur n'a pas déja le même pseudo
            /**@var $user User **/
            $user = $this->findOneBy(['pseudo' => $pseudo]);


            // Gestion du token
            $token = $user->createToken();
            // Je modifie le token
            $user->setToken($token);

            // Je l'ajoute dans la base de données
            $em->persist($user);

            $em->flush();

            // Si le mot de passe est le bon
            if($user->verifyPassword($password)){
                return [
                    'token' => $token,
                    'pseudo' => $user->getPseudo(),
                    'connect' => true,
                    'id' => $user->getId(),
                    'email' => $user->getEmail(),
                ];
            }else{
                return ['connect' => false];
            }
        }else{
            return ['connect' => false];
        }
    }

    public function ForgetPassword($email){
        if( !empty($email)) {
            $em =$this->getEntityManager();
            /**
             * @var $user User
             */
            $user = $this->findOneBy(['email'=>$email]);

            //envoyer un mail à l'adresse entré avec le nouveau mdp
            if ($user != null){
                $newpassword = $user->createPassword();
                $user->setPassword(crypt($newpassword));
                $em->persist($user);
                $em->flush();
                $ok = $user->sendNewPassword($newpassword);
                if($ok) {
                    return ['email' => true];
                }
                else{
                    return ['email' => false];
                }
            } else {
                return ['email' => false];
            }
        } else {
            return ['email' => false];
        }
    }

    public function UserProfil($token){
        if(!empty($token)){

            /**
             * @var $user User
             */
            $user = $this->findOneBy(['token'=>$token]);

            $classement = $this->getClassement($user);

            if($user != null){
                return [
                    'score'=>$user->getScore(),
                    'classement' => $classement +1,
                ];
            } else{
                return ['token'=>false];
            }
        }else{
            return ['token'=>false];
        }
    }


    public function UserUpdate($token,$oldpasword,$newpassword)
    {
        if (!empty($token) && !empty($oldpasword) && !empty($newpassword)) {
            $em = $this->getEntityManager();

            /**
             * @var $profil User
             */
            $profil = $this->findOneBy(['token' => $token]);
            if ($profil != null) {
                if ($profil->verifyPassword($oldpasword)) {
                    $profil->setPassword(crypt($newpassword));
                    $em->persist($profil);
                    $em->flush();

                    return [
                        'update' => true
                    ];
                } else {
                    return [
                        'password' => $profil->getPassword(),
                        'update' => false
                    ];
                }
            } else {
                return [
                    'update' => false
                ];
            }
        } else {
            return ['update' => false];
        }
    }



    public function UserClassement($token){
        if(!empty($token)){
            $em=$this->getEntityManager();

            /**
             * @var $user User
             */
            $user = $this->findOneBy(['token'=>$token]);
            if($user) {
                $qb = $this->createQueryBuilder('u');
                $qb->select('u.score', 'u.pseudo')
                    ->orderBy('u.score', 'DESC')
                    ->setMaxResults(10);
                $classements = $qb->getQuery()->getArrayResult();

                $classement = $this->getClassement($user);

                return  ['firsts' => $classements, 'me' => $classement +1];

            }else{
                return ['token' => false];
            }
        }else{
            return ['token'=>false];
        }

    }

    /**
     * @param User $user
     * @return int
     */
    public function getClassement($user)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select('u.id','u.score')
            ->orderBy('u.score', 'DESC')
            ->where('u.score < :score')
            ->setParameters([
                ':score' => $user->getScore(),
            ]);
        return count($qb->getQuery()->getArrayResult());
    }





    public function DeleteFriend($token,$amis){
        if(!empty($token)&& !empty($amis)){
        $em = $this->getEntityManager();
            /**
             * @var $user User
             */
            $user = $this->findOneBy(['token' => $token]);

            $amis = $this->find($amis);

            if($amis != null && $user != null){
                $user->removeFriend($amis);
                $em->persist($user);
                $em->flush();

                return ['delete' => true];

            }else{
                return ['delete' => false];
            }
        }else{
            return ['delete' => false];
        }
    }

    public function GetFriends($token)
    {
        if(!empty($token)){
            $em = $this->getEntityManager();

            /**
             * @var $user User
             */
            $qb = $this->createQueryBuilder('u');
            $qb->select('u,a')
                ->leftJoin('u.amis','a', Expr\Join::WITH)
                ->orderBy('u.id', 'DESC')
                ->where('u.token = :token')
                ->setParameters([
                    ':token' => $token,
                ])
            ;
            $user = $qb->getQuery()->getSingleResult(AbstractQuery::HYDRATE_ARRAY);

            if($user != null) {

                return [
                    'friend' => $user['amis'],
                ];
            }else{
                return ['friend' => false];
            }
        }
        else{
            return ['friend' => false];
        }
    }



    public function FindFriend($token,$username){
        if(!empty($token)&& !empty($username)){
            $em=$this->getEntityManager();

            /**
             * @var $user User
             */
            $user = $this->findOneBy(['token'=>$token]);



            $friend = $this->findOneBy(['pseudo' => $username]);


            if($user != null && $friend != null) {
                $user->addFriend($friend);
                $em->persist($user);
                $em->flush();
                return [
                    'friend' => true,
                ];
            }else{
                return ['friend' => false];
            }
        }
        /*
        Données récupérés :
        token
        id
        pseudo

        Traitement :
        Récupère le pseudo envoyé par l’utilisateur et cherche qqn avec un pseudo semblable dans la base
        S’il y a qqn avec le même pseudo, l’ajouter en ami

        Données renvoyés :
            Si l’ami est trouvé:
        friend(true)
            Si l’ami n’est pas trouvé:
        friend(false)*/
    }

}